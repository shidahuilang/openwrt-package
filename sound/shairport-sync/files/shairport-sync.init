#!/bin/sh /etc/rc.common
# Copyright (C) 2015-2016 OpenWrt.org

START=99
USE_PROCD=1

append_num() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	if [ -n "$val" ] || [ -n "$def" ]; then
		printf "\t%s = ${val:-$def};\n" "$opt"
	fi
}

append_str() {
	local cfg="$1"
	local var="$2"
	local opt="$3"
	local def="$4"
	local val

	config_get val "$cfg" "$var"
	if [ -n "$val" ] || [ -n "$def" ]; then
		printf "\t%s = \"${val:-$def}\";\n" "$opt"
	fi
}

start_instance() {
	local cfg=$1
	local conf_custom conf_file aux

	config_get_bool aux "$cfg" 'enabled' '0'
	[ "$aux" = 0 ] && return 1

	config_get_bool conf_custom "$cfg" 'conf_custom' '0'
	config_get conf_file "$cfg" "conf_file"
	[ "$conf_custom" -ne 1 ] && [ -z "$conf_file" ] && {
		mkdir -p /var/etc
		conf_file="/var/etc/shairport-sync-${cfg}.conf"
	} && {
		printf "// Automatically generated from UCI config\n\n"

		# General
		printf "general =\n"
		printf "{\n"
		append_str "$cfg" name "name"
		append_str "$cfg" password "password"
		append_str "$cfg" interpolation "interpolation"
		append_str "$cfg" output_backend "output_backend"
		append_str "$cfg" mdns_backend "mdns_backend"
		append_num "$cfg" port "port"
		append_num "$cfg" udp_port_base "udp_port_base"
		append_num "$cfg" udp_port_range "udp_port_range"
		append_str "$cfg" statistics "statistics"
		append_num "$cfg" drift "drift"
		append_num "$cfg" resync_threshold "resync_threshold"
		append_num "$cfg" log_verbosity "log_verbosity"
		append_str "$cfg" ignore_volume_control "ignore_volume_control"
		append_num "$cfg" volume_range_db "volume_range_db"
		append_str "$cfg" regtype "regtype"
		append_str "$cfg" playback_mode "playback_mode"
		printf "};\n\n"

		# Metadata
		printf "metadata =\n"
		printf "{\n"
		append_str "$cfg" metadata_enabled "enabled"
		append_str "$cfg" metadata_cover_art "include_cover_art"
		append_str "$cfg" metadata_pipe_name "pipe_name"
		append_num "$cfg" metadata_pipe_timeout "pipe_timeout"
		append_str "$cfg" metadata_socket_address "socket_address"
		append_num "$cfg" metadata_socket_port "socket_port"
		append_num "$cfg" metadata_socket_msglength "socket_msglength"
		printf "};\n\n"

		# Session control
		printf "sessioncontrol =\n"
		printf "{\n"
		append_str "$cfg" sesctl_run_before_play_begins "run_this_before_play_begins"
		append_str "$cfg" sesctl_run_after_play_ends "run_this_after_play_ends"
		append_str "$cfg" sesctl_wait_for_completion "wait_for_completion"
		append_str "$cfg" sesctl_session_interruption "allow_session_interruption"
		append_num "$cfg" sesctl_session_timeout "session_timeout"
		printf "};\n\n"

		# Alsa audio back end
		printf "alsa =\n"
		printf "{\n"
		append_str "$cfg" alsa_output_device "output_device"
		append_str "$cfg" alsa_mixer_control_name "mixer_control_name"
		append_str "$cfg" alsa_mixer_device "mixer_device"
		append_num "$cfg" alsa_latency_offset "audio_backend_latency_offset"
		append_num "$cfg" alsa_buffer_length "audio_backend_buffer_desired_length"
		append_str "$cfg" alsa_disable_synchronization "disable_synchronization"
		append_num "$cfg" alsa_period_size "period_size"
		append_num "$cfg" alsa_buffer_size "buffer_size"
		printf "};\n\n"

		# Pipe audio back end
		printf "pipe =\n"
		printf "{\n"
		append_str "$cfg" pipe_name "name"
		append_num "$cfg" pipe_latency_offset "audio_backend_latency_offset"
		append_num "$cfg" pipe_buffer_length "audio_backend_buffer_desired_length"
		printf "};\n\n"

		# Stdout audio back end
		printf "stdout =\n"
		printf "{\n"
		append_num "$cfg" stdout_latency_offset "audio_backend_latency_offset"
		append_num "$cfg" stdout_buffer_length "audio_backend_buffer_desired_length"
		printf "};\n\n"

		# AO audio back end
		printf "ao =\n"
		printf "{\n"
		append_num "$cfg" ao_latency_offset "audio_backend_latency_offset"
		append_num "$cfg" ao_buffer_length "audio_backend_buffer_desired_length"
		printf "};\n\n"
	} > "$conf_file"

	procd_open_instance

	procd_set_param command /usr/bin/shairport-sync
	procd_append_param command -c "$conf_file"

	config_get_bool aux "$cfg" 'respawn' '0'
	[ "$aux" = 1 ] && procd_set_param respawn

	procd_close_instance
}

service_triggers() {
	procd_add_reload_trigger "shairport-sync"
}

start_service() {
	config_load shairport-sync
	config_foreach start_instance shairport-sync
}
