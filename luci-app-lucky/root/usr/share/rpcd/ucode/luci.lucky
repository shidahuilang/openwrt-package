#!/usr/bin/ucode
/*
 * SPDX-License-Identifier: GPL-2.0-only
 *
 * Copyright (C) 2021-2025  sirpdboy  <herboy2008@gmail.com> https://github.com/sirpdboy/luci-app-lucky 
 */

'use strict';

import { access, error, lstat, popen, readfile, writefile } from 'fs';

/* Kanged from ucode/luci */
function shellquote(s) {
	return `'${replace(s, "'", "'\\''")}'`;
}
const methods = {
	set_ConfInfo: {
		args: { key: 'key', value: 'value' },
		call: function(req) {
			if (!access('/usr/bin/lucky'))
				return { status: 255, error: 'lucky not found' };

			if (!req.args?.key)
				return { status: 255, error: 'missing key parameter' };

			const key = shellquote(req.args.key);
			const configPath = '/etc/lucky';
			let exit_code = 255;
			
			if (req.args.value !== null && req.args.value !== undefined) {
				const value = shellquote(req.args.value);
				exit_code = system(`/usr/bin/lucky -setconf -key ${key} -value ${value} -cd ${configPath}`);
			} else {
				// 如果没有提供value，只设置key
				exit_code = system(`/usr/bin/lucky -setconf -key ${key} -cd ${configPath}`);
			}

			return { status: exit_code };
		}
	},

	get_baseInfo: {
		call: function() {
			if (!access('/usr/bin/lucky'))
				return { ConfInfo: {}, error: 'lucky not found' };

			const configPath = '/etc/lucky';
			const fd = popen('/usr/bin/lucky -baseConfInfo -cd /etc/lucky');
			if (fd) {
				let config = fd.read('all');
				fd.close();
				
				if (!config || length(config) === 0)
					return { ConfInfo: {}, error: 'empty response' };
				
				try {
					config = json(config);
					return { ConfInfo: config };
				} catch(e) {
					return { ConfInfo: {}, error: 'JSON parse error: ' + e };
				}
			} else {
				return { ConfInfo: {}, error: 'failed to execute lucky command' };
			}
		}
	},

	get_Info: {
		call: function() {
			if (!access('/usr/bin/lucky'))
				return { Info: {}, error: 'lucky not found' };
			const configPath = '/etc/lucky';
			const fd = popen('/usr/bin/lucky -info -cd /etc/lucky');
			if (fd) {
				let config = fd.read('all');
				fd.close();
				
				if (!config || length(config) === 0)
					return { Info: {}, error: 'empty response' };
				
				try {
					config = json(config);
					return { Info: config };
				} catch(e) {
					return { Info: {}, error: 'JSON parse error: ' + e };
				}
			} else {
				return { Info: {}, error: 'failed to execute lucky command' };
			}
		}
	}
};

return { 'luci.lucky': methods };