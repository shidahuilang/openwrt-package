diff --git a/crates/proto/src/h3/h3_client_stream.rs b/crates/proto/src/h3/h3_client_stream.rs
index d7db8bf0..be49301c 100644
--- a/crates/proto/src/h3/h3_client_stream.rs
+++ b/crates/proto/src/h3/h3_client_stream.rs
@@ -390,7 +390,7 @@ impl H3ClientStreamBuilder {
         if crypto_config.alpn_protocols.is_empty() {
             crypto_config.alpn_protocols = vec![ALPN_H3.to_vec()];
         }
-        let early_data_enabled = crypto_config.enable_early_data;
+        let early_data_enabled = true;
 
         let mut client_config =
             ClientConfig::new(Arc::new(QuicClientConfig::try_from(crypto_config)?));
diff --git a/crates/proto/src/quic/quic_client_stream.rs b/crates/proto/src/quic/quic_client_stream.rs
index f760afd0..cfee9382 100644
--- a/crates/proto/src/quic/quic_client_stream.rs
+++ b/crates/proto/src/quic/quic_client_stream.rs
@@ -236,7 +236,7 @@ impl QuicClientStreamBuilder {
         if crypto_config.alpn_protocols.is_empty() {
             crypto_config.alpn_protocols = vec![quic_stream::DOQ_ALPN.to_vec()];
         }
-        let early_data_enabled = crypto_config.enable_early_data;
+        let early_data_enabled = true;
 
         let mut client_config =
             ClientConfig::new(Arc::new(QuicClientConfig::try_from(crypto_config)?));
diff --git a/crates/proto/src/rustls/tls_stream.rs b/crates/proto/src/rustls/tls_stream.rs
index 1946a685..4719a808 100644
--- a/crates/proto/src/rustls/tls_stream.rs
+++ b/crates/proto/src/rustls/tls_stream.rs
@@ -121,7 +121,7 @@ pub fn tls_connect_with_bind_addr<P: RuntimeProvider>(
     BufDnsStreamHandle,
 ) {
     let (message_sender, outbound_messages) = BufDnsStreamHandle::new(name_server);
-    let early_data_enabled = client_config.enable_early_data;
+    let early_data_enabled = true;
     let tls_connector = TlsConnector::from(client_config).early_data(early_data_enabled);
 
     // This set of futures collapses the next tcp socket into a stream which can be used for
@@ -169,7 +169,7 @@ where
     F: Future<Output = io::Result<S>> + Send + Unpin + 'static,
 {
     let (message_sender, outbound_messages) = BufDnsStreamHandle::new(name_server);
-    let early_data_enabled = client_config.enable_early_data;
+    let early_data_enabled = true;
     let tls_connector = TlsConnector::from(client_config).early_data(early_data_enabled);
 
     // This set of futures collapses the next tcp socket into a stream which can be used for
