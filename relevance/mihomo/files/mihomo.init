#!/bin/sh /etc/rc.common

. /lib/functions/network.sh

START=99
USE_PROCD=1

# permission
mihomo_user="mihomo"
mihomo_group="mihomo"

# routing
fw_table=80
fw_mark=80

# paths
home_dir="/etc/mihomo"
run_dir="$home_dir/run"
run_app_log_path="$run_dir/app.log"
run_core_log_path="$run_dir/core.log"
run_profile_path="$run_dir/config.yaml"
run_ui_dir="$run_dir/ui"
run_ui_razord_path="$run_ui_dir/razord.tar.gz"
run_ui_razord_src_dir="$run_ui_dir/Razord-meta-gh-pages"
run_ui_razord_dir="$run_ui_dir/razord"
run_ui_yacd_path="$run_ui_dir/yacd.tar.gz"
run_ui_yacd_src_dir="$run_ui_dir/Yacd-meta-gh-pages"
run_ui_yacd_dir="$run_ui_dir/yacd"
run_ui_metacubexd_path="$run_ui_dir/metacubexd.tar.gz"
run_ui_metacubexd_src_dir="$run_ui_dir/metacubexd-gh-pages"
run_ui_metacubexd_dir="$run_ui_dir/metacubexd"
geoip_mmdb_path="$run_dir/Country.mmdb"
geoip_dat_path="$run_dir/GeoIP.dat"
geosite_path="$run_dir/GeoSite.dat"
mixin_path="$home_dir/mixin.yaml"
upnp_lease_watcher="$home_dir/upnp_lease_watcher.sh"

# wan
network_find_wan wan_dev
network_get_ipaddr wan_ip "$wan_dev"

start_service() {
	config_load mihomo

	local enabled
	config_get_bool enabled "config" "enabled" 0
	if [ "$enabled" == 0 ]; then
		clear_all_log
		log "App is disabled."
		log "Exiting..."
		return
	fi
	clear_app_log
	log "App is enabled."
	log "Starting..."
	# download profile
	log "Download profile."
	local profile
	config_get profile "config" "profile"
	curl -s -L -o "$run_profile_path" "$profile"
	# download ui
	log "Download UI."
	local ui_razord ui_razord_url ui_yacd ui_yacd_url ui_metacubexd ui_metacubexd_url
	config_get_bool ui_razord "mixin" "ui_razord" 0
	config_get ui_razord_url "mixin" "ui_razord_url"
	config_get_bool ui_yacd "mixin" "ui_yacd" 0
	config_get ui_yacd_url "mixin" "ui_yacd_url"
	config_get_bool ui_metacubexd "mixin" "ui_metacubexd" 0
	config_get ui_metacubexd_url "mixin" "ui_metacubexd_url"
	download_ui "$ui_razord" "$ui_razord_url" "$run_ui_razord_path" "$run_ui_dir" "$run_ui_razord_src_dir" "$run_ui_razord_dir"
	download_ui "$ui_yacd" "$ui_yacd_url" "$run_ui_yacd_path" "$run_ui_dir" "$run_ui_yacd_src_dir" "$run_ui_yacd_dir"
	download_ui "$ui_metacubexd" "$ui_metacubexd_url" "$run_ui_metacubexd_path" "$run_ui_dir" "$run_ui_metacubexd_src_dir" "$run_ui_metacubexd_dir"
	# mixin
	local mixin
	config_get_bool mixin "config" "mixin" 1
	if [ "$mixin" == 0 ]; then
		log "Mixin is disabled, only mixin neccesary config."
		# api
		local api_port api_secret
		config_get api_port "mixin" "api_port" "9090"
		config_get api_secret "mixin" "api_secret" "666666"
		# inbound
		local http_port socks_port mixed_port redir_port tproxy_port
		config_get http_port "mixin" "http_port" "8080"
		config_get socks_port "mixin" "socks_port" "1080"
		config_get mixed_port "mixin" "mixed_port" "7890"
		config_get redir_port "mixin" "redir_port" "7891"
		config_get tproxy_port "mixin" "tproxy_port" "7892"
		# dns
		local dns_port
		config_get dns_port "mixin" "dns_port" "1053"
		# do mixin
		ui_path="ui" api_listen="0.0.0.0:$api_port" api_secret="$api_secret" \
		http_port="$http_port" socks_port="$socks_port" mixed_port="$mixed_port" redir_port="$redir_port" tproxy_port="$tproxy_port" \
		dns_enable="true" dns_listen="0.0.0.0:$dns_port" \
		yq -M -i '
		.external-ui = env(ui_path) | .external-controller = env(api_listen) | .secret = env(api_secret) |
		.port = env(http_port) | .socks-port = env(socks_port) | .mixed-port = env(mixed_port) | .redir-port = env(redir_port) | .tproxy-port = env(tproxy_port) |
		.dns.enable = env(dns_enable) | .dns.listen = env(dns_listen)
		' "$run_profile_path"
	else
		log "Mixin is enabled, mixin all config."
		# global
		local mode match_process unify_delay tcp_concurrent tcp_keep_alive_interval
		config_get mode "mixin" "mode"
		config_get match_process "mixin" "match_process"
		config_get_bool unify_delay "mixin" "unify_delay" 0
		config_get_bool tcp_concurrent "mixin" "tcp_concurrent" 0
		config_get tcp_keep_alive_interval "mixin" "tcp_keep_alive_interval" 600
		# api
		local api_port api_secret selection_cache
		config_get api_port "mixin" "api_port" "9090"
		config_get api_secret "mixin" "api_secret" "666666"
		config_get_bool selection_cache "mixin" "selection_cache" 0
		# inbound
		local allow_lan http_port socks_port mixed_port redir_port tproxy_port
		config_get_bool allow_lan "mixin" "allow_lan" 0
		config_get http_port "mixin" "http_port" "8080"
		config_get socks_port "mixin" "socks_port" "1080"
		config_get mixed_port "mixin" "mixed_port" "7890"
		config_get redir_port "mixin" "redir_port" "7891"
		config_get tproxy_port "mixin" "tproxy_port" "7892"
		# dns
		local dns_port dns_mode fake_ip_range fake_ip_cache fake_ip_filter dns_system_hosts dns_hosts dns_nameserver dns_fallback_filter dns_nameserver_policy
		config_get dns_port "mixin" "dns_port" "1053"
		config_get dns_mode "mixin" "dns_mode"
		config_get fake_ip_range "mixin" "fake_ip_range" "198.18.0.1/16"
		config_get_bool fake_ip_cache "mixin" "fake_ip_cache" 0
		config_get_bool fake_ip_filter "mixin" "fake_ip_filter" 0
		config_get_bool dns_system_hosts "mixin" "dns_system_hosts" 0
		config_get_bool dns_hosts "mixin" "dns_hosts" 0
		config_get_bool dns_nameserver "mixin" "dns_nameserver" 0
		config_get_bool dns_fallback_filter "mixin" "dns_fallback_filter" 0
		config_get_bool dns_nameserver_policy "mixin" "dns_nameserver_policy" 0
		# sniffer
		local sniffer sniff_dns_mapping sniff_pure_ip sniffer_overwrite_dest
		config_get_bool sniffer "mixin" "sniffer" 0
		config_get_bool sniff_dns_mapping "mixin" "sniff_dns_mapping" 0
		config_get_bool sniff_pure_ip "mixin" "sniff_pure_ip" 0
		config_get_bool sniffer_overwrite_dest "mixin" "sniffer_overwrite_dest" 0
		# geox
		local geoip_format geodata_loader geoip_mmdb_url geoip_dat_url geosite_url geox_auto_update geox_update_interval
		config_get geoip_format "mixin" "geoip_format"
		config_get geodata_loader "mixin" "geodata_loader"
		config_get geoip_mmdb_url "mixin" "geoip_mmdb_url"
		config_get geoip_dat_url "mixin" "geoip_dat_url"
		config_get geosite_url "mixin" "geosite_url"
		config_get_bool geox_auto_update "mixin" "geox_auto_update" 0
		config_get geox_update_interval "mixin" "geox_update_interval" "24"
		# do mixin
		mode="$mode" match_process="$match_process" unify_delay="$unify_delay" tcp_concurrent="$tcp_concurrent" tcp_keep_alive_interval="$tcp_keep_alive_interval" \
		ui_path="ui" api_listen="0.0.0.0:$api_port" api_secret="$api_secret" selection_cache="$selection_cache" \
		allow_lan="$allow_lan" http_port="$http_port" socks_port="$socks_port" mixed_port="$mixed_port" redir_port="$redir_port" tproxy_port="$tproxy_port" \
		dns_enable="true" dns_listen="0.0.0.0:$dns_port" dns_mode="$dns_mode" fake_ip_range="$fake_ip_range" fake_ip_cache="$fake_ip_cache" \
		dns_system_hosts="$dns_system_hosts" dns_hosts="$dns_hosts" \
		sniffer="$sniffer" sniff_dns_mapping="$sniff_dns_mapping" sniff_pure_ip="$sniff_pure_ip" sniffer_overwrite_dest="$sniffer_overwrite_dest" \
		geoip_format="$geoip_format" geodata_loader="$geodata_loader" geoip_mmdb_url="$geoip_mmdb_url" geoip_dat_url="$geoip_dat_url" geosite_url="$geosite_url" \
		geox_auto_update="$geox_auto_update" geox_update_interval="$geox_update_interval" \
		yq -M -i '
		.mode = env(mode) | .find-process-mode = env(match_process) | .unified-delay = env(unify_delay) == 1 | .tcp-concurrent = env(tcp_concurrent) == 1 | .keep-alive-interval = env(tcp_keep_alive_interval) |
		.external-ui = env(ui_path) | .external-controller = env(api_listen) | .secret = env(api_secret) | .profile.store-selected = env(selection_cache) == 1 |
		.allow-lan = env(allow_lan) == 1 | .port = env(http_port) | .socks-port = env(socks_port) | .mixed-port = env(mixed_port) | .redir-port = env(redir_port) | .tproxy-port = env(tproxy_port) |
		.dns.enable = env(dns_enable) | .dns.listen = env(dns_listen) | .dns.enhanced-mode = env(dns_mode) | .dns.fake-ip-range = env(fake_ip_range) | .profile.store-fake-ip = env(fake_ip_cache) == 1 |
		.dns.use-system-hosts = env(dns_system_hosts) == 1 | .dns.use-hosts = env(dns_hosts) == 1 |
		.sniffer.enable = env(sniffer) == 1 | .sniffer.force-dns-mapping = env(sniff_dns_mapping) == 1 | .sniffer.parse-pure-ip = env(sniff_pure_ip) == 1 | .sniffer.override-destination = env(sniffer_overwrite_dest) == 1 |
		.geodata-mode = env(geoip_format) == "dat" | .geodata-loader = env(geodata_loader) | .geox-url.mmdb = env(geoip_mmdb_url) | .geox-url.geoip = env(geoip_dat_url) | .geox-url.geosite = env(geosite_url) |
		.geo-auto-update = env(geox_auto_update) == 1 | .geo-update-interval = env(geox_update_interval)
		' "$run_profile_path"

		if [ "$fake_ip_filter" == 1 ]; then
			yq -M -i 'del(.dns.fake-ip-filter)' "$run_profile_path"
			config_list_foreach "mixin" "fake_ip_filters" mixin_fake_ip_filter
		fi
		if [ "$dns_hosts" == 1 ]; then
			yq -M -i 'del(.hosts)' "$run_profile_path"
			config_foreach mixin_host "host"
		fi
		if [ "$dns_nameserver" == 1 ]; then
			yq -M -i 'del(.dns.default-nameserver) | del(.dns.proxy-server-nameserver) | del(.dns.nameserver) | del(.dns.fallback)' "$run_profile_path"
			config_foreach mixin_nameserver "nameserver"
		fi
		if [ "$dns_fallback_filter" == 1 ]; then
			yq -M -i '.dns.fallback-filter.geoip = true | del(.dns.fallback-filter.geoip-code) | del(.dns.fallback-filter.geosite) | del(.dns.fallback-filter.ipcidr) | del(.dns.fallback-filter.domain)' "$run_profile_path"
			config_foreach mixin_fallback_filter "fallback_filter"
		fi
		if [ "$dns_nameserver_policy" == 1 ]; then
			yq -M -i 'del(.dns.nameserver-policy)' "$run_profile_path"
			config_foreach mixin_nameserver_policy "nameserver_policy"
		fi
		if [ "$sniffer" == 1 ]; then
			yq -M -i 'del(.sniffer.force-domain) | del(.sniffer.skip-domain) | del(.sniffer.sniff)' "$run_profile_path"
			config_list_foreach "mixin" "sniffer_force_domain_name" mixin_sniffer_domain_name "force-domain"
			config_list_foreach "mixin" "sniffer_ignore_domain_name" mixin_sniffer_domain_name "skip-domain"
			config_foreach mixin_sniff "sniff"
		fi
		# mixin file
		if [ -s "$mixin_path" ]; then
			yq ea -M -i 'select(fi == 0) * select(fi == 1)' "$run_profile_path" "$mixin_path"
		fi
	fi
	yq -M -i 'del(.tun)' "$run_profile_path"
	# test profile
	log "Profile testing..."
	if (/usr/bin/mihomo -d "$run_dir" -t > /dev/null 2>&1); then
		log "Profile test passed!"
	else
		log "Profile test failed! Exiting..."
		return
	fi
	# start core
	procd_open_instance core

	procd_set_param command /bin/sh -c "/usr/bin/mihomo -d $run_dir > $run_core_log_path 2>&1"
	procd_set_param file "$run_profile_path"
	procd_set_param reload_signal HUP
	procd_set_param respawn

	procd_add_jail core
	procd_add_jail_mount /usr/bin/mihomo
	procd_add_jail_mount /etc/TZ /etc/hosts /etc/ssl/certs
	procd_add_jail_mount_rw "$run_dir"
	procd_set_param capabilities /etc/capabilities/mihomo.json
	procd_set_param user "$mihomo_user"
	procd_set_param group "$mihomo_group"
	procd_set_param no_new_privs 1

	procd_close_instance
	# hijack
	local transparent_proxy dns_hijack
	config_get_bool transparent_proxy "proxy" "transparent_proxy" 0
	config_get_bool dns_hijack "proxy" "dns_hijack" 0
	if [ "$transparent_proxy" == 1 ]; then
		log "Transparent Proxy is enabled."
		if [ "$dns_hijack" == 0 ]; then
			log "DNS Hijack is disabled, dns request will not redirect to the core."
		fi
		# transparent proxy
		log "Transparent Proxy: Start hijack."
		ip rule add fwmark "$fw_mark" table "$fw_table"
		ip route add local default dev lo table "$fw_table"
		nft -f "$home_dir/hijack.nft" -D FW_MARK="$fw_mark" -D MIHOMO_USER="$mihomo_user" -D TPROXY_PORT="$tproxy_port" -D DNS_PORT="$dns_port"
		# exclusion
		log "Transparent Proxy: Add exclusions."
		add_wan_inbound_exclusion
		add_firewall_exclusion
		add_upnp_exclusion
		# reload config
		config_load mihomo
		# router proxy
		local router_proxy
		config_get_bool router_proxy "proxy" "router_proxy" 0
		if [ "$router_proxy" == 1 ]; then
			log "Transparent Proxy: Router Proxy is enabled, set proxy for router."
			if [ "$dns_hijack" == 1 ]; then
				nft add rule ip mihomo nat_output jump router_dns_hijack
			fi
			nft add rule ip mihomo mangle_output jump router_proxy
		fi
		# access control
		local access_control_mode
		config_get access_control_mode "proxy" "access_control_mode"
		config_list_foreach "proxy" "acl_ip" add_acl_ip
		config_list_foreach "proxy" "acl_mac" add_acl_mac
		if [ -z "$access_control_mode" ]; then
			log "Transparent Proxy: Access Control is disabled, set proxy for all client."
			if [ "$dns_hijack" == 1 ]; then
				nft add rule ip mihomo dns_hijack jump all_dns_hijack
			fi
			nft add rule ip mihomo proxy jump all_proxy
		elif [ "$access_control_mode" == "allow" ]; then
			log "Transparent Proxy: Access Control is using allow mode, set proxy for client which is in acl."
			if [ "$dns_hijack" == 1 ]; then
				nft add rule ip mihomo dns_hijack jump allow_dns_hijack
			fi
			nft add rule ip mihomo proxy jump allow_proxy
		elif [ "$access_control_mode" == "block" ]; then
			log "Transparent Proxy: Access Control is using block mode, set proxy for client which is not in acl."
			if [ "$dns_hijack" == 1 ]; then
				nft add rule ip mihomo dns_hijack jump block_dns_hijack
			fi
			nft add rule ip mihomo proxy jump block_proxy
		fi
	fi
	# cron
	local scheduled_restart cron_expression
	config_get scheduled_restart "config" "scheduled_restart"
	config_get cron_expression "config" "cron_expression"
	if [[ "$scheduled_restart" == 1 && -n "$cron_expression" ]]; then
		log "Add crontab for scheduled restart."
		echo "$cron_expression /etc/init.d/mihomo restart #mihomo" >> "/etc/crontabs/root"
	fi
	log "Start Successful!"
}

stop_service() {
	cleanup
}

service_stopped() {
	clear_all_log
}

reload_service() {
	cleanup
	start
}

service_triggers() {
	procd_add_reload_trigger "mihomo" "firewall" "upnpd"
	procd_add_reload_interface_trigger "$wan_dev"
}

cleanup() {
	# delete hijack
	ip rule del table $fw_table > /dev/null 2>&1
	ip route del local default dev lo table "$fw_table" > /dev/null 2>&1
	nft delete table ip mihomo > /dev/null 2>&1
	# delete cron
	sed -i '/#mihomo/d' "/etc/crontabs/root" > /dev/null 2>&1
}

log() {
	echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$run_app_log_path"
}

clear_all_log() {
	clear_app_log
	clear_core_log
}

clear_app_log() {
	> "$run_app_log_path"
}

clear_core_log() {
	> "$run_core_log_path"
}

download_ui() {
	local enabled=$1
	local url=$2
	local file_path=$3
	local file_dir=$4
	local src_dir=$5
	local dest_dir=$6
	if [ "$enabled" == 1 ]; then
		if [ ! -d "$dest_dir" ]; then
			curl -s -L -o "$file_path" "$url"
			tar -x -z -f "$file_path" -C "$file_dir"
			rm -f "$file_path"
			mv "$src_dir" "$dest_dir"
		fi
	else
		if [ -d "$dest_dir" ]; then
			rm -rf "$dest_dir"
		fi
	fi
}

mixin_fake_ip_filter() {
	domain_name="$1" yq -M -i '.dns.fake-ip-filter += [env(domain_name)]' "$run_profile_path"
}

mixin_host() {
	local section=$1

	local enabled domain_name
	config_get_bool enabled "$section" "enabled" 0
	config_get domain_name "$section" "domain_name"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "ip" do_mixin_host "$domain_name"
}

do_mixin_host() {
	ip="$1" domain_name="$2" yq -M -i '.hosts.[env(domain_name)] += [env(ip)]' "$run_profile_path"
}

mixin_nameserver() {
	local section=$1

	local enabled type
	config_get_bool enabled "$section" "enabled" 0
	config_get type "$section" "type"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "nameserver" do_mixin_nameserver "$type"
}

do_mixin_nameserver() {
	nameserver=$1 type=$2 yq -M -i '.dns.[env(type)] += [env(nameserver)]' "$run_profile_path"
}

mixin_fallback_filter() {
	local section=$1

	local enabled
	config_get_bool enabled "$section" "enabled" 0
	config_get type "$section" "type"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "value" do_mixin_fallback_filter "$type"
}

do_mixin_fallback_filter() {
	value=$1 type=$2 yq -M -i '.dns.fallback-filter.[env(type)] += [env(value)]' "$run_profile_path"
}

mixin_nameserver_policy() {
	local section=$1

	local enabled matcher
	config_get_bool enabled "$section" "enabled" 0
	config_get matcher "$section" "matcher"

	if [ "$enabled" == 0 ]; then
		return
	fi

	config_list_foreach "$section" "nameserver" do_mixin_nameserver_policy "$matcher"
}

do_mixin_nameserver_policy() {
	nameserver=$1 matcher=$2 yq -M -i '.dns.nameserver-policy.[env(matcher)] += [env(nameserver)]' "$run_profile_path"
}

mixin_sniffer_domain_name() {
	domain_name=$1 type=$2 yq -M -i '.sniffer.[env(type)] += [env(domain_name)]' "$run_profile_path"
}

mixin_sniff() {
	local section=$1

	local enabled protocol overwrite_dest
	config_get_bool enabled "$section" "enabled" 0
	config_get protocol "$section" "protocol"
	config_get_bool overwrite_dest "$section" "overwrite_dest"

	if [ "$enabled" == 0 ]; then
		return
	fi

	protocol="$protocol" overwrite_dest="$overwrite_dest" yq -M -i '.sniffer.sniff.[env(protocol)].override-destination = env(overwrite_dest) == 1' "$run_profile_path"
	config_list_foreach "$section" "port" do_mixin_sniff "$protocol"
}

do_mixin_sniff() {
	port=$1 protocol=$2 yq -M -i '.sniffer.sniff.[env(protocol)].ports += [env(port)]' "$run_profile_path"
}

add_acl_ip() {
	nft add element ip mihomo acl_ip \{ "$1" \}
}

add_acl_mac() {
	nft add element ip mihomo acl_mac \{ "$1" \}
}

add_wan_inbound_exclusion() {
	nft add element ip mihomo private_ip \{ "$wan_ip" \}
}

add_firewall_exclusion() {
	config_load firewall
	config_foreach add_firewall_rule_exclusion "rule"
	config_foreach add_firewall_redirect_exclusion "redirect"
}

add_firewall_rule_exclusion() {
	local section="$1"

	local enabled name proto src dest dest_ip dest_port family
	config_get_bool enabled "$section" "enabled" 1
	config_get name "$section" "name"
	config_get proto "$section" "proto"
	config_get src "$section" "src"
	config_get dest "$section" "dest"
	config_get dest_port "$section" "dest_port"
	config_get family "$section" "family"

	if [[ "$enabled" == 0 || -z "$src" || -n "$dest" || -z "$dest_port" || "$family" == "ipv6" ]]; then
		return
	fi

	local tcp=0
	local udp=0
	if [[ -z "$proto" || "$proto" == "all" ]]; then
		tcp=1
		udp=1
	else
		for p in $proto; do
			[ "$p" == "tcp" ] && tcp=1
			[ "$p" == "udp" ] && udp=1
		done
	fi

	if [ "$tcp" == 1 ]; then
		for port in $dest_port; do
			nft add element ip mihomo router_exclusion \{ tcp . "$port" \}
		done
	fi
	if [ "$udp" == 1 ]; then
		for port in $dest_port; do
			nft add element ip mihomo router_exclusion \{ udp . "$port" \}
		done
	fi
}

add_firewall_redirect_exclusion() {
	local section="$1"

	local enabled name proto src_dport dest dest_ip dest_port
	config_get_bool enabled "$section" "enabled" 1
	config_get name "$section" "name"
	config_get proto "$section" "proto"
	config_get src_dport "$section" "src_dport"
	config_get dest "$section" "dest"
	config_get dest_ip "$section" "dest_ip"
	config_get dest_port "$section" "dest_port"

	if [ "$enabled" == 0 ]; then
		return
	fi

	local tcp=0
	local udp=0
	if [[ -z "$proto" || "$proto" == "all" ]]; then
		tcp=1
		udp=1
	else
		for p in $proto; do
			[ "$p" == "tcp" ] && tcp=1
			[ "$p" == "udp" ] && udp=1
		done
	fi

	if [ -z "$dest_port" ]; then
		dest_port="$src_dport"
	fi

	if [[ -z "$dest" || -z "$dest_ip" ]]; then
		if [ "$tcp" == 1 ]; then
			nft add element ip mihomo router_exclusion \{ tcp . "$dest_port" \}
		fi
		if [ "$udp" == 1 ]; then
			nft add element ip mihomo router_exclusion \{ udp . "$dest_port" \}
		fi
	else
		if [ "$tcp" == 1 ]; then
			nft add element ip mihomo redirect_exclusion \{ tcp . "$dest_ip" . "$dest_port" \}
		fi
		if [ "$udp" == 1 ]; then
			nft add element ip mihomo redirect_exclusion \{ udp . "$dest_ip" . "$dest_port" \}
		fi
	fi
}

add_upnp_exclusion() {
	procd_open_instance upnp_lease_watcher
	procd_set_param command "$upnp_lease_watcher" "-t" $(date +%s)
	procd_set_param respawn 3600 5 0
	procd_close_instance
}