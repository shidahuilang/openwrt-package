#!/bin/sh /etc/rc.common

START=90

USE_PROCD=1

PROG=/usr/bin/zerotier-one
CONFIG_PATH=/var/lib/zerotier-one

section_enabled() {
	config_get_bool enabled "$1" 'enabled' 0
	[ $enabled -ne 0 ]
}

start_instance() {
	local cfg="$1"
	local port secret config_path local_conf path
	local args=""

	if ! section_enabled "$cfg"; then
		echo "disabled in config"
		return 1
	fi

	config_get config_path $cfg 'config_path'
	config_get port $cfg 'port'
	config_get secret $cfg 'secret'
	config_get local_conf $cfg 'local_conf'

	path=${CONFIG_PATH}_$cfg

	# Remove existing link or folder
	rm -rf $path

	# Create link from CONFIG_PATH to config_path
	if [ -n "$config_path" -a "$config_path" != "$path" ]; then
		if [ ! -d "$config_path" ]; then
			echo "ZeroTier config_path does not exist: $config_path" 1>&2
			return
		fi

		# ensure that the symlink target exists
		mkdir -p $(dirname $path)

		ln -s $config_path $path
	fi

	mkdir -p $path/networks.d

	# link latest default config path to latest config path
	rm -f $CONFIG_PATH
	ln -s $path $CONFIG_PATH

	if [ -n "$port" ]; then
		args="$args -p${port}"
	fi

	if [ -z "$secret" ]; then
		echo "Generate secret - please wait..."
		local sf="/tmp/zt.$cfg.secret"

		zerotier-idtool generate "$sf" > /dev/null
		[ $? -ne 0 ] && return 1

		secret="$(cat $sf)"
		rm "$sf"

		uci set zerotier.$cfg.secret="$secret"
		uci commit zerotier
	fi

	if [ -n "$secret" ]; then
		echo "$secret" > $path/identity.secret
		# make sure there is not previous identity.public
		rm -f $path/identity.public
	fi

	if [ -f "$local_conf" ]; then
		ln -s "$local_conf" $path/local.conf
	fi

	add_join() {
		# an (empty) config file will cause ZT to join a network
		touch $path/networks.d/$1.conf
	}

	config_list_foreach $cfg 'join' add_join

	procd_open_instance
	procd_set_param command $PROG $args $path
	procd_set_param stderr 1
	procd_close_instance
}

start_service() {
	config_load 'zerotier'
	config_foreach start_instance 'zerotier'
}

stop_instance() {
	local cfg="$1"

	# Remove existing link or folder
	rm -rf ${CONFIG_PATH}_${cfg}
}

stop_service() {
	config_load 'zerotier'
	config_foreach stop_instance 'zerotier'
	rm -f ${CONFIG_PATH}
}
