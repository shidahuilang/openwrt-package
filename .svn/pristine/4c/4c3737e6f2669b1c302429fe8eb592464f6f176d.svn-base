config daemon args
	# driver:[arg]  a Layer-2 driver to use (knxd supports more than one)
	#option layer2 ""
	# enable caching of group communication networkstate
	option GroupCache 0
	# FILE start the programm as daemon. Output will be written to FILE if given
	option daemon "/var/log/knxd.log"
	#enable the EIBnet/IP server to answer discovery and description requests (SEARCH, DESCRIPTION)
	option Discovery 1
	# EIBADDR set our EIB address to EIBADDR (default 0.0.1)
	option eibaddr "0.0.1"
	# CLIENTADDRS set client addrs
	option client_addrs "0.0.2:10"
	# LEVEL set error level
	option error 0
	# PORT listen at TCP port PORT (default 6720)
	option listen_tcp "6720"
	# wait for L_Data_ind while sending (for all EMI based backends)
	option no_emisend_queuing 0
	# SERVERNAME name of the EIBnet/IP server (default is 'knxd')
	option Name "KNX2"
	# do not assume KNXnet/IP Tunneling bus interface can handle parallel cEMI requests
	option no_tunnel_client_queuing 0
	# the next Layer2 interface may not enter monitor mode
	option no_monitor 0
	# enable EIBnet/IP Routing in the EIBnet/IP server
	option Routing 1
	# [ip[:port]] starts an EIBnet/IP multicast server
	option Server '224.0.23.12'
	# MASK set trace flags (bitmask)
	option trace 0
	# tpuarts backend should generate L2 acks for all group telegrams
	option tpuarts_ack_all_group 0
	# tpuarts backend should generate L2 acks for all individual telegrams
	option tpuarts_ack_all_individual 0
	# tpuarts backend should should use a full interface reset (for Disch TPUART interfaces)
	option tpuarts_disch_reset 0
	# enable EIBnet/IP Tunneling in the EIBnet/IP server
	option Tunnelling 1
	# FILE  listen at Unix domain socket FILE (default /tmp/eib)
	option listen_local "/var/run/knxd"
	# example with tpuarts interface
	# option url 'tpuarts:/dev/ttyAMA0'
	# example with IP interface in tunnel mode
	option url 'usb:'
